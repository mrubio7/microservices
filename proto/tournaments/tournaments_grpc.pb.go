// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/tournaments.proto

package tournaments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TournamentService_CreateOrganizer_FullMethodName         = "/tournaments.TournamentService/CreateOrganizer"
	TournamentService_NewTournament_FullMethodName           = "/tournaments.TournamentService/NewTournament"
	TournamentService_GetAllTournaments_FullMethodName       = "/tournaments.TournamentService/GetAllTournaments"
	TournamentService_GetTournamentByFaceitId_FullMethodName = "/tournaments.TournamentService/GetTournamentByFaceitId"
	TournamentService_GetLiveEseaDetails_FullMethodName      = "/tournaments.TournamentService/GetLiveEseaDetails"
	TournamentService_GetEseaDetailsBySeason_FullMethodName  = "/tournaments.TournamentService/GetEseaDetailsBySeason"
)

// TournamentServiceClient is the client API for TournamentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TournamentServiceClient interface {
	CreateOrganizer(ctx context.Context, in *NewOrganizerRequest, opts ...grpc.CallOption) (*Organizer, error)
	NewTournament(ctx context.Context, in *NewTournamentRequest, opts ...grpc.CallOption) (*Tournament, error)
	GetAllTournaments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TournamentList, error)
	GetTournamentByFaceitId(ctx context.Context, in *GetTournamentByIdRequest, opts ...grpc.CallOption) (*Tournament, error)
	// ESEA
	GetLiveEseaDetails(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Esea, error)
	GetEseaDetailsBySeason(ctx context.Context, in *GetEseaLeagueBySeasonNumberRequest, opts ...grpc.CallOption) (*Esea, error)
}

type tournamentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTournamentServiceClient(cc grpc.ClientConnInterface) TournamentServiceClient {
	return &tournamentServiceClient{cc}
}

func (c *tournamentServiceClient) CreateOrganizer(ctx context.Context, in *NewOrganizerRequest, opts ...grpc.CallOption) (*Organizer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Organizer)
	err := c.cc.Invoke(ctx, TournamentService_CreateOrganizer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) NewTournament(ctx context.Context, in *NewTournamentRequest, opts ...grpc.CallOption) (*Tournament, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tournament)
	err := c.cc.Invoke(ctx, TournamentService_NewTournament_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetAllTournaments(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TournamentList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TournamentList)
	err := c.cc.Invoke(ctx, TournamentService_GetAllTournaments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetTournamentByFaceitId(ctx context.Context, in *GetTournamentByIdRequest, opts ...grpc.CallOption) (*Tournament, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Tournament)
	err := c.cc.Invoke(ctx, TournamentService_GetTournamentByFaceitId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetLiveEseaDetails(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Esea, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Esea)
	err := c.cc.Invoke(ctx, TournamentService_GetLiveEseaDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tournamentServiceClient) GetEseaDetailsBySeason(ctx context.Context, in *GetEseaLeagueBySeasonNumberRequest, opts ...grpc.CallOption) (*Esea, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Esea)
	err := c.cc.Invoke(ctx, TournamentService_GetEseaDetailsBySeason_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TournamentServiceServer is the server API for TournamentService service.
// All implementations must embed UnimplementedTournamentServiceServer
// for forward compatibility.
type TournamentServiceServer interface {
	CreateOrganizer(context.Context, *NewOrganizerRequest) (*Organizer, error)
	NewTournament(context.Context, *NewTournamentRequest) (*Tournament, error)
	GetAllTournaments(context.Context, *Empty) (*TournamentList, error)
	GetTournamentByFaceitId(context.Context, *GetTournamentByIdRequest) (*Tournament, error)
	// ESEA
	GetLiveEseaDetails(context.Context, *Empty) (*Esea, error)
	GetEseaDetailsBySeason(context.Context, *GetEseaLeagueBySeasonNumberRequest) (*Esea, error)
	mustEmbedUnimplementedTournamentServiceServer()
}

// UnimplementedTournamentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTournamentServiceServer struct{}

func (UnimplementedTournamentServiceServer) CreateOrganizer(context.Context, *NewOrganizerRequest) (*Organizer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizer not implemented")
}
func (UnimplementedTournamentServiceServer) NewTournament(context.Context, *NewTournamentRequest) (*Tournament, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTournament not implemented")
}
func (UnimplementedTournamentServiceServer) GetAllTournaments(context.Context, *Empty) (*TournamentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTournaments not implemented")
}
func (UnimplementedTournamentServiceServer) GetTournamentByFaceitId(context.Context, *GetTournamentByIdRequest) (*Tournament, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTournamentByFaceitId not implemented")
}
func (UnimplementedTournamentServiceServer) GetLiveEseaDetails(context.Context, *Empty) (*Esea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveEseaDetails not implemented")
}
func (UnimplementedTournamentServiceServer) GetEseaDetailsBySeason(context.Context, *GetEseaLeagueBySeasonNumberRequest) (*Esea, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEseaDetailsBySeason not implemented")
}
func (UnimplementedTournamentServiceServer) mustEmbedUnimplementedTournamentServiceServer() {}
func (UnimplementedTournamentServiceServer) testEmbeddedByValue()                           {}

// UnsafeTournamentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TournamentServiceServer will
// result in compilation errors.
type UnsafeTournamentServiceServer interface {
	mustEmbedUnimplementedTournamentServiceServer()
}

func RegisterTournamentServiceServer(s grpc.ServiceRegistrar, srv TournamentServiceServer) {
	// If the following call pancis, it indicates UnimplementedTournamentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TournamentService_ServiceDesc, srv)
}

func _TournamentService_CreateOrganizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrganizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).CreateOrganizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_CreateOrganizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).CreateOrganizer(ctx, req.(*NewOrganizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_NewTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTournamentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).NewTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_NewTournament_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).NewTournament(ctx, req.(*NewTournamentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetAllTournaments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetAllTournaments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetAllTournaments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetAllTournaments(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetTournamentByFaceitId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTournamentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetTournamentByFaceitId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetTournamentByFaceitId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetTournamentByFaceitId(ctx, req.(*GetTournamentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetLiveEseaDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetLiveEseaDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetLiveEseaDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetLiveEseaDetails(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TournamentService_GetEseaDetailsBySeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEseaLeagueBySeasonNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TournamentServiceServer).GetEseaDetailsBySeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TournamentService_GetEseaDetailsBySeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TournamentServiceServer).GetEseaDetailsBySeason(ctx, req.(*GetEseaLeagueBySeasonNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TournamentService_ServiceDesc is the grpc.ServiceDesc for TournamentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TournamentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tournaments.TournamentService",
	HandlerType: (*TournamentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrganizer",
			Handler:    _TournamentService_CreateOrganizer_Handler,
		},
		{
			MethodName: "NewTournament",
			Handler:    _TournamentService_NewTournament_Handler,
		},
		{
			MethodName: "GetAllTournaments",
			Handler:    _TournamentService_GetAllTournaments_Handler,
		},
		{
			MethodName: "GetTournamentByFaceitId",
			Handler:    _TournamentService_GetTournamentByFaceitId_Handler,
		},
		{
			MethodName: "GetLiveEseaDetails",
			Handler:    _TournamentService_GetLiveEseaDetails_Handler,
		},
		{
			MethodName: "GetEseaDetailsBySeason",
			Handler:    _TournamentService_GetEseaDetailsBySeason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tournaments.proto",
}
