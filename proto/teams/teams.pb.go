// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: proto/teams.proto

package teams

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32      `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FaceitId    string     `protobuf:"bytes,2,opt,name=FaceitId,proto3" json:"FaceitId,omitempty"`
	Name        string     `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Nickname    string     `protobuf:"bytes,4,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Avatar      string     `protobuf:"bytes,5,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Active      bool       `protobuf:"varint,6,opt,name=Active,proto3" json:"Active,omitempty"`
	PlayersId   []string   `protobuf:"bytes,7,rep,name=PlayersId,proto3" json:"PlayersId,omitempty"`
	Stats       *TeamStats `protobuf:"bytes,8,opt,name=Stats,proto3" json:"Stats,omitempty"`
	Twitter     string     `protobuf:"bytes,9,opt,name=Twitter,proto3" json:"Twitter,omitempty"`
	Instagram   string     `protobuf:"bytes,10,opt,name=Instagram,proto3" json:"Instagram,omitempty"`
	Web         string     `protobuf:"bytes,11,opt,name=Web,proto3" json:"Web,omitempty"`
	Tournaments []string   `protobuf:"bytes,12,rep,name=Tournaments,proto3" json:"Tournaments,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	mi := &file_proto_teams_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{0}
}

func (x *Team) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Team) GetFaceitId() string {
	if x != nil {
		return x.FaceitId
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *Team) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *Team) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Team) GetPlayersId() []string {
	if x != nil {
		return x.PlayersId
	}
	return nil
}

func (x *Team) GetStats() *TeamStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Team) GetTwitter() string {
	if x != nil {
		return x.Twitter
	}
	return ""
}

func (x *Team) GetInstagram() string {
	if x != nil {
		return x.Instagram
	}
	return ""
}

func (x *Team) GetWeb() string {
	if x != nil {
		return x.Web
	}
	return ""
}

func (x *Team) GetTournaments() []string {
	if x != nil {
		return x.Tournaments
	}
	return nil
}

type Standing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceitId       string `protobuf:"bytes,1,opt,name=FaceitId,proto3" json:"FaceitId,omitempty"`
	TournamentId   string `protobuf:"bytes,2,opt,name=TournamentId,proto3" json:"TournamentId,omitempty"`
	IsDisqualified bool   `protobuf:"varint,3,opt,name=IsDisqualified,proto3" json:"IsDisqualified,omitempty"`
	RankStart      int32  `protobuf:"varint,4,opt,name=RankStart,proto3" json:"RankStart,omitempty"`
	RankEnd        int32  `protobuf:"varint,5,opt,name=RankEnd,proto3" json:"RankEnd,omitempty"`
	Points         int32  `protobuf:"varint,6,opt,name=Points,proto3" json:"Points,omitempty"`
	MatchesPlayed  int32  `protobuf:"varint,7,opt,name=MatchesPlayed,proto3" json:"MatchesPlayed,omitempty"`
	MatchesWon     int32  `protobuf:"varint,8,opt,name=MatchesWon,proto3" json:"MatchesWon,omitempty"`
	MatchesLost    int32  `protobuf:"varint,9,opt,name=MatchesLost,proto3" json:"MatchesLost,omitempty"`
	MatchesTied    int32  `protobuf:"varint,10,opt,name=MatchesTied,proto3" json:"MatchesTied,omitempty"`
	BuchholzScore  int32  `protobuf:"varint,11,opt,name=BuchholzScore,proto3" json:"BuchholzScore,omitempty"`
}

func (x *Standing) Reset() {
	*x = Standing{}
	mi := &file_proto_teams_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Standing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Standing) ProtoMessage() {}

func (x *Standing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Standing.ProtoReflect.Descriptor instead.
func (*Standing) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{1}
}

func (x *Standing) GetFaceitId() string {
	if x != nil {
		return x.FaceitId
	}
	return ""
}

func (x *Standing) GetTournamentId() string {
	if x != nil {
		return x.TournamentId
	}
	return ""
}

func (x *Standing) GetIsDisqualified() bool {
	if x != nil {
		return x.IsDisqualified
	}
	return false
}

func (x *Standing) GetRankStart() int32 {
	if x != nil {
		return x.RankStart
	}
	return 0
}

func (x *Standing) GetRankEnd() int32 {
	if x != nil {
		return x.RankEnd
	}
	return 0
}

func (x *Standing) GetPoints() int32 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *Standing) GetMatchesPlayed() int32 {
	if x != nil {
		return x.MatchesPlayed
	}
	return 0
}

func (x *Standing) GetMatchesWon() int32 {
	if x != nil {
		return x.MatchesWon
	}
	return 0
}

func (x *Standing) GetMatchesLost() int32 {
	if x != nil {
		return x.MatchesLost
	}
	return 0
}

func (x *Standing) GetMatchesTied() int32 {
	if x != nil {
		return x.MatchesTied
	}
	return 0
}

func (x *Standing) GetBuchholzScore() int32 {
	if x != nil {
		return x.BuchholzScore
	}
	return 0
}

type TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalMatches  int32                    `protobuf:"varint,1,opt,name=TotalMatches,proto3" json:"TotalMatches,omitempty"`
	Wins          int32                    `protobuf:"varint,2,opt,name=Wins,proto3" json:"Wins,omitempty"`
	Winrate       float32                  `protobuf:"fixed32,3,opt,name=Winrate,proto3" json:"Winrate,omitempty"`
	RecentResults []int32                  `protobuf:"varint,4,rep,packed,name=RecentResults,proto3" json:"RecentResults,omitempty"`
	MapStats      map[string]*TeamMapStats `protobuf:"bytes,5,rep,name=MapStats,proto3" json:"MapStats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	mi := &file_proto_teams_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{2}
}

func (x *TeamStats) GetTotalMatches() int32 {
	if x != nil {
		return x.TotalMatches
	}
	return 0
}

func (x *TeamStats) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *TeamStats) GetWinrate() float32 {
	if x != nil {
		return x.Winrate
	}
	return 0
}

func (x *TeamStats) GetRecentResults() []int32 {
	if x != nil {
		return x.RecentResults
	}
	return nil
}

func (x *TeamStats) GetMapStats() map[string]*TeamMapStats {
	if x != nil {
		return x.MapStats
	}
	return nil
}

type TeamMapStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapName string `protobuf:"bytes,1,opt,name=MapName,proto3" json:"MapName,omitempty"`
	Winrate int32  `protobuf:"varint,2,opt,name=Winrate,proto3" json:"Winrate,omitempty"`
	Matches int32  `protobuf:"varint,3,opt,name=Matches,proto3" json:"Matches,omitempty"`
}

func (x *TeamMapStats) Reset() {
	*x = TeamMapStats{}
	mi := &file_proto_teams_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamMapStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamMapStats) ProtoMessage() {}

func (x *TeamMapStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamMapStats.ProtoReflect.Descriptor instead.
func (*TeamMapStats) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{3}
}

func (x *TeamMapStats) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

func (x *TeamMapStats) GetWinrate() int32 {
	if x != nil {
		return x.Winrate
	}
	return 0
}

func (x *TeamMapStats) GetMatches() int32 {
	if x != nil {
		return x.Matches
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_proto_teams_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{4}
}

type TeamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *TeamList) Reset() {
	*x = TeamList{}
	mi := &file_proto_teams_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamList) ProtoMessage() {}

func (x *TeamList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamList.ProtoReflect.Descriptor instead.
func (*TeamList) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{5}
}

func (x *TeamList) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

type GetTeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *GetTeamsRequest) Reset() {
	*x = GetTeamsRequest{}
	mi := &file_proto_teams_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamsRequest) ProtoMessage() {}

func (x *GetTeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamsRequest.ProtoReflect.Descriptor instead.
func (*GetTeamsRequest) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{6}
}

func (x *GetTeamsRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type GetTeamByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GetTeamByIdRequest) Reset() {
	*x = GetTeamByIdRequest{}
	mi := &file_proto_teams_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamByIdRequest) ProtoMessage() {}

func (x *GetTeamByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamByIdRequest.ProtoReflect.Descriptor instead.
func (*GetTeamByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{7}
}

func (x *GetTeamByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetTeamByNicknameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nickname string `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
}

func (x *GetTeamByNicknameRequest) Reset() {
	*x = GetTeamByNicknameRequest{}
	mi := &file_proto_teams_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamByNicknameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamByNicknameRequest) ProtoMessage() {}

func (x *GetTeamByNicknameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamByNicknameRequest.ProtoReflect.Descriptor instead.
func (*GetTeamByNicknameRequest) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{8}
}

func (x *GetTeamByNicknameRequest) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

type GetTeamByFaceitIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceitId string `protobuf:"bytes,1,opt,name=FaceitId,proto3" json:"FaceitId,omitempty"`
}

func (x *GetTeamByFaceitIdRequest) Reset() {
	*x = GetTeamByFaceitIdRequest{}
	mi := &file_proto_teams_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamByFaceitIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamByFaceitIdRequest) ProtoMessage() {}

func (x *GetTeamByFaceitIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamByFaceitIdRequest.ProtoReflect.Descriptor instead.
func (*GetTeamByFaceitIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{9}
}

func (x *GetTeamByFaceitIdRequest) GetFaceitId() string {
	if x != nil {
		return x.FaceitId
	}
	return ""
}

type NewTeamFromFaceitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceitId string `protobuf:"bytes,1,opt,name=FaceitId,proto3" json:"FaceitId,omitempty"`
}

func (x *NewTeamFromFaceitRequest) Reset() {
	*x = NewTeamFromFaceitRequest{}
	mi := &file_proto_teams_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTeamFromFaceitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTeamFromFaceitRequest) ProtoMessage() {}

func (x *NewTeamFromFaceitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTeamFromFaceitRequest.ProtoReflect.Descriptor instead.
func (*NewTeamFromFaceitRequest) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{10}
}

func (x *NewTeamFromFaceitRequest) GetFaceitId() string {
	if x != nil {
		return x.FaceitId
	}
	return ""
}

type GetTeamByPlayerIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId string `protobuf:"bytes,1,opt,name=PlayerId,proto3" json:"PlayerId,omitempty"`
}

func (x *GetTeamByPlayerIdRequest) Reset() {
	*x = GetTeamByPlayerIdRequest{}
	mi := &file_proto_teams_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamByPlayerIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamByPlayerIdRequest) ProtoMessage() {}

func (x *GetTeamByPlayerIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamByPlayerIdRequest.ProtoReflect.Descriptor instead.
func (*GetTeamByPlayerIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{11}
}

func (x *GetTeamByPlayerIdRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GetTeamFromFaceitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaceitId string `protobuf:"bytes,1,opt,name=FaceitId,proto3" json:"FaceitId,omitempty"`
}

func (x *GetTeamFromFaceitRequest) Reset() {
	*x = GetTeamFromFaceitRequest{}
	mi := &file_proto_teams_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTeamFromFaceitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTeamFromFaceitRequest) ProtoMessage() {}

func (x *GetTeamFromFaceitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_teams_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTeamFromFaceitRequest.ProtoReflect.Descriptor instead.
func (*GetTeamFromFaceitRequest) Descriptor() ([]byte, []int) {
	return file_proto_teams_proto_rawDescGZIP(), []int{12}
}

func (x *GetTeamFromFaceitRequest) GetFaceitId() string {
	if x != nil {
		return x.FaceitId
	}
	return ""
}

var File_proto_teams_proto protoreflect.FileDescriptor

var file_proto_teams_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x04, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x49, 0x64, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a,
	0x03, 0x57, 0x65, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x57, 0x65, 0x62, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xf2, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x49, 0x73, 0x44, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x73, 0x44, 0x69, 0x73, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x61, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x52, 0x61, 0x6e, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x57, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x57, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x54, 0x69, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x54, 0x69, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x42, 0x75, 0x63, 0x68, 0x68, 0x6f, 0x6c, 0x7a, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x75, 0x63, 0x68, 0x68, 0x6f, 0x6c,
	0x7a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x57, 0x69, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x57, 0x69, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x57,
	0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x08,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x50, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a, 0x0c, 0x54, 0x65,
	0x61, 0x6d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x2d, 0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49,
	0x64, 0x22, 0x36, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49,
	0x64, 0x22, 0x36, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d,
	0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x36, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d,
	0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49, 0x64, 0x32, 0xa3, 0x04, 0x0a, 0x0b, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x0c, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54,
	0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x0c, 0x2e, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x61, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b,
	0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x46, 0x61, 0x63,
	0x65, 0x69, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x12, 0x1f, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f,
	0x6d, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b,
	0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x41, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74,
	0x12, 0x1f, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d,
	0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0b, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x36,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x61, 0x63, 0x65,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x47, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x42, 0x79, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x2e,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x1a, 0x5a, 0x18, 0x69, 0x62, 0x65, 0x72, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x3b, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_teams_proto_rawDescOnce sync.Once
	file_proto_teams_proto_rawDescData = file_proto_teams_proto_rawDesc
)

func file_proto_teams_proto_rawDescGZIP() []byte {
	file_proto_teams_proto_rawDescOnce.Do(func() {
		file_proto_teams_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_teams_proto_rawDescData)
	})
	return file_proto_teams_proto_rawDescData
}

var file_proto_teams_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_teams_proto_goTypes = []any{
	(*Team)(nil),                     // 0: teams.Team
	(*Standing)(nil),                 // 1: teams.Standing
	(*TeamStats)(nil),                // 2: teams.TeamStats
	(*TeamMapStats)(nil),             // 3: teams.TeamMapStats
	(*Empty)(nil),                    // 4: teams.Empty
	(*TeamList)(nil),                 // 5: teams.TeamList
	(*GetTeamsRequest)(nil),          // 6: teams.GetTeamsRequest
	(*GetTeamByIdRequest)(nil),       // 7: teams.GetTeamByIdRequest
	(*GetTeamByNicknameRequest)(nil), // 8: teams.GetTeamByNicknameRequest
	(*GetTeamByFaceitIdRequest)(nil), // 9: teams.GetTeamByFaceitIdRequest
	(*NewTeamFromFaceitRequest)(nil), // 10: teams.NewTeamFromFaceitRequest
	(*GetTeamByPlayerIdRequest)(nil), // 11: teams.GetTeamByPlayerIdRequest
	(*GetTeamFromFaceitRequest)(nil), // 12: teams.GetTeamFromFaceitRequest
	nil,                              // 13: teams.TeamStats.MapStatsEntry
}
var file_proto_teams_proto_depIdxs = []int32{
	2,  // 0: teams.Team.Stats:type_name -> teams.TeamStats
	13, // 1: teams.TeamStats.MapStats:type_name -> teams.TeamStats.MapStatsEntry
	0,  // 2: teams.TeamList.teams:type_name -> teams.Team
	3,  // 3: teams.TeamStats.MapStatsEntry.value:type_name -> teams.TeamMapStats
	4,  // 4: teams.TeamService.GetAllTeams:input_type -> teams.Empty
	4,  // 5: teams.TeamService.GetActiveTeams:input_type -> teams.Empty
	7,  // 6: teams.TeamService.GetById:input_type -> teams.GetTeamByIdRequest
	8,  // 7: teams.TeamService.GetByNickname:input_type -> teams.GetTeamByNicknameRequest
	9,  // 8: teams.TeamService.GetByFaceitId:input_type -> teams.GetTeamByFaceitIdRequest
	10, // 9: teams.TeamService.CreateFromFaceit:input_type -> teams.NewTeamFromFaceitRequest
	12, // 10: teams.TeamService.GetTeamFromFaceit:input_type -> teams.GetTeamFromFaceitRequest
	10, // 11: teams.TeamService.Update:input_type -> teams.NewTeamFromFaceitRequest
	11, // 12: teams.TeamService.FindTeamsByPlayerId:input_type -> teams.GetTeamByPlayerIdRequest
	5,  // 13: teams.TeamService.GetAllTeams:output_type -> teams.TeamList
	5,  // 14: teams.TeamService.GetActiveTeams:output_type -> teams.TeamList
	0,  // 15: teams.TeamService.GetById:output_type -> teams.Team
	0,  // 16: teams.TeamService.GetByNickname:output_type -> teams.Team
	0,  // 17: teams.TeamService.GetByFaceitId:output_type -> teams.Team
	0,  // 18: teams.TeamService.CreateFromFaceit:output_type -> teams.Team
	0,  // 19: teams.TeamService.GetTeamFromFaceit:output_type -> teams.Team
	0,  // 20: teams.TeamService.Update:output_type -> teams.Team
	5,  // 21: teams.TeamService.FindTeamsByPlayerId:output_type -> teams.TeamList
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_teams_proto_init() }
func file_proto_teams_proto_init() {
	if File_proto_teams_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_teams_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_teams_proto_goTypes,
		DependencyIndexes: file_proto_teams_proto_depIdxs,
		MessageInfos:      file_proto_teams_proto_msgTypes,
	}.Build()
	File_proto_teams_proto = out.File
	file_proto_teams_proto_rawDesc = nil
	file_proto_teams_proto_goTypes = nil
	file_proto_teams_proto_depIdxs = nil
}
